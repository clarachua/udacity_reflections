What happens when you initialize a repository? Why do you need to do it?

- .git folder happens that creates the inital git
- Need to do it to tell git to start tracking changes in the folder

How is the staging area different from the working directory and the repository?
What value do you think it offers?

- Gives an intermediate area to add / remove files that are interconnected to the commit
- Allows for work in progress changes to be made without actually commiting

How can you use the staging area to make sure you have one commit per logical
change?
- use git diff --staged to see what the diff is between staged and last commit
- use git diff to see diff between staged and working directory
- use git diff #commit1 #commit2 to see diff between commits

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- Trying out new stuff
- Adding a different language version for example
- Refactoring code

How do the diagrams help you visualize the branch structure?
- Easier to read / understand the changes
- Can see how many branches and which branch we are at

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
- Merge all changes so we have everything that works together
- Represented to show changes to master and any branches

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
- Some automatic merges may not always take into consideration if some changes are the same
(e.g. if 2 branches did same function but named them differently, you only wanna keep 1)
- Always doing merges manually may be time consuming and tiresome if it's fairly straightforward
